// <auto-generated />
using ECommerce_WebApp.Services;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce_WebApp.Services.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241125200324_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("ECommerce_WebApp.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ECommerce_WebApp.Entities.Product", b =>
                {
                    b.Property<int>("ProdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProdDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProdImage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProdName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProdPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("ProdRating")
                        .HasColumnType("TEXT");

                    b.HasKey("ProdId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ECommerce_WebApp.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "harsh@gmail.com",
                            Password = "H@rsh123",
                            Role = "Admin",
                            UserName = "Harsh"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "keron@gmail.com",
                            Password = "Keron@123",
                            Role = "Shopper",
                            UserName = "Keron"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "arjun@gmail.com",
                            Password = "@rjun123",
                            Role = "Admin",
                            UserName = "Arjun"
                        });
                });

            modelBuilder.Entity("ECommerce_WebApp.Entities.Category", b =>
                {
                    b.HasOne("ECommerce_WebApp.Entities.Category", "ParentCategory")
                        .WithMany("SubCategoryCollection")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("ECommerce_WebApp.Entities.Product", b =>
                {
                    b.HasOne("ECommerce_WebApp.Entities.Category", "ProdCategory")
                        .WithMany("ProductCollection")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProdCategory");
                });

            modelBuilder.Entity("ECommerce_WebApp.Entities.Category", b =>
                {
                    b.Navigation("ProductCollection");

                    b.Navigation("SubCategoryCollection");
                });
#pragma warning restore 612, 618
        }
    }
}
